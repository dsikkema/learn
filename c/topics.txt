TOODO:
 - the hashmap + related all need to be moved into their own dir and given their own Makefile
 - a Makefile to run any individual c file
Covered topics:
- function pointers and coercions (implicit and explicit)
- heap vs stack memory, printing their addresses to see how memory addresses colocate
- printf formats for signed vs unsigned types of different lengths
- malloc and free
- bit fields
- fork, execl, signal handling
- arrays vs array pointers. Finding array length, passing arrays as args
- pass by ref vs pass by val, and returning addresses / pointers
- sizeof: accessing fields in a struct by coercing and doing arithmetic on a pointer to the struct
- null termination of char arrays
- Socket programming - a simple client/server that send text back and forth over a tcp connection
- implement linkedlist
- implement hashing, including bitwise operations
- unit tests with unity (including sizing and assertion messages)
- importing .h files
- macros
- calculating array length using sizeof arr/sizeof type
- printing raw memory contents as hexadecimal to debug 
- 2d array
- variable vs fixed size arrays and initializing them
- implement hashmap

Not covered:
- varargs
- File I/O and system calls - Understanding the difference between buffered and unbuffered I/O, working with file descriptors.

Save for later (interested, but not now):
- using LSPs or other IDE-like functionality for c programming in vim (code navigation etc)

